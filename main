#include <stdio.h>
#include <stdlib.h>

// Create a node
struct Node {
  int data;
  struct Node* prev;
  struct Node* next;
  };

// Insert at the beginning
void insertAtBeginning(struct Node** head_ref, int new_data) {
  // Allocate memory to a node
  struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));

  // insert the data
  new_node->data = new_data;

  new_node->next = (*head_ref);
  new_node->prev = NULL;

  // Move head to new node
  (*head_ref) = new_node;
}

// Insert a node after a node
void insertAfter(struct Node* prev_node, int new_data) {
  if (prev_node == NULL) {
  printf("the given previous node cannot be NULL");
  return;
  }

  struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
  new_node->data = new_data;
  new_node->next = prev_node->next;
  prev_node->next = new_node;
}

// Insert the the end
void insertAtEnd(struct Node** head_ref, int new_data) {
  struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
  struct Node* last = *head_ref; /* used in step 5*/

  new_node->data = new_data;
  new_node->next = NULL;

  if (*head_ref == NULL) {
  *head_ref = new_node;
  return;
  }

  while (last->next != NULL) last = last->next;

  last->next = new_node;
  return;
}

// Delete a node
void deleteNode(struct Node** head_ref, int key) {
  struct Node *temp = *head_ref, *prev;

  if (temp != NULL && temp->data == key) {
  *head_ref = temp->next;
  free(temp);
  return;
  }
  // Find the key to be deleted
  while (temp != NULL && temp->data != key) {
  prev = temp;
  temp = temp->next;
  }

  // If the key is not present
  if (temp == NULL) return;

  // Remove the node
  prev->next = temp->next;

  free(temp);
}

// Print the linked list
void printList(struct Node* node) {
  while (node != NULL) {
    printf(" %d ", node->data);
    node = node->next;
  }
  printf("\n");
}

// Driver program
int main() {
  struct Node* head = NULL;
  struct Node* first = malloc(sizeof(struct Node));
  struct Node* second = malloc(sizeof(struct Node));
  struct Node* third = malloc(sizeof(struct Node));
  first->data=1;
  second->data=2;
  third->data=3;
  first->next=second;
  first->prev=NULL;
  second->next=third;
  second->prev=first;
  third->next=NULL;
  third->prev=second;
  head = first;
  
  printf("Linked list \t\t:");
  printList(head);  

//insertion

  insertAtBeginning(&head, 0);
  printf("Insertion at beginning  :");
  printList(head);
  
  insertAtEnd(&head, 5);
  printf("Insertion at the end  \t:");
  printList(head);
  
  insertAfter(third, 4);
  printf("Insertion at the middle :");
  printList(head);

  //deletion

  printf("\nAfter deleting first node: ");
  deleteNode(&head, 0);
  printList(head);
  
  printf("\nAfter deleting first node: ");
  deleteNode(&head, 5);
  printList(head);
  
  printf("\nAfter deleting first node: ");
  deleteNode(&head, 3);
  printList(head);
}
